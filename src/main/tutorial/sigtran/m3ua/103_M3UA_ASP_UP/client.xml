<?xml version="1.0" encoding="UTF-8"?>
<!-- Related XMLSchema file: conf/schemas/scenario.xsd -->


<!--
    Document   : alice.xml
    Created on : 23/06/2009
    Author     : jbrisseau
    Description: Send the M3UA message ASP Up
-->

<!--
    INFOS : 
    
    The following scenarios send the same message "ASP Up" (class = 3, type = 1) as
    descibed in the RFC 4666 paragraph 3.5.1 with different ways to describe it.
    
        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |         Tag = 0x0011          |           Length = 8          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                         ASP Identifier = 755787               |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |Tag = 0x0004 (INFO_String)     |           Length = 9          |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       \                                                               \
       /                     INFO String = "ASPUP"                     /
       \                                                               \
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    
-->

<scenario>
	
    <sendMessageSIGTRAN	name="Send ASPUP1" remoteHost="[localHostM3UA]" remotePort="[localPortM3UA]">	
        <UA name="m3ua" file="m3ua.xml">
            <header 	version="1" reserved="0" messageClass="ASP_State_Maintenance_Messages" messageType="ASP_Up"/>
    				
            <parameter tag="17" >
                <field name="ASP_Identifier" format="Integer" value="755787" length="4"/>
            </parameter>
    	
            <parameter tag="INFO_String">
                <field name="INFO_String" format="String" value="ASPUP"/>
            </parameter>
        </UA>
    </sendMessageSIGTRAN>
    
    <parameter name="[reference]" value="010003040000001c0011000800000013000400094153505550000000" />
        
    <receiveMessageSIGTRAN name="Wait ASPUPACK1" request="false" type="ASP_Up:3_1" result="ASP_Up_Acknowledgement:3_4">
        <parameter name="[binary]" operation="protocol.setFromMessage" value="message.binary"/>
    </receiveMessageSIGTRAN>
    
    <test parameter="[binary]" condition="binary.equals" value="[reference]"/>
 
 
    <parameter name="[version]" operation="protocol.setFromMessage" value="ua.header.version"/>    
    <test parameter="[version]" condition="number.equals" value="1"/>
    <parameter name="[reserved]" operation="protocol.setFromMessage" value="ua.header.reserved"/>    
    <test parameter="[reserved]" condition="number.equals" value="0"/>
    <parameter name="[messageClass]" operation="protocol.setFromMessage" value="ua.header.messageClass"/>    
    <test parameter="[messageClass]" condition="number.equals" value="3"/>   <!-- ASP_State_Maintenance_Messages -->
    <parameter name="[messageType]" operation="protocol.setFromMessage" value="ua.header.messageType"/>    
    <test parameter="[messageType]" condition="number.equals" value="4"/>   <!-- ASP_UP -->
    <parameter name="[messageLength]" operation="protocol.setFromMessage" value="ua.header.messageLength"/>    
    <test parameter="[messageLength]" condition="number.equals" value="28"/>
  
    <parameter name="[aspIdentifierName]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.name"/>    
    <test parameter="[aspIdentifierName]" condition="string.equals" value="ASP_Identifier"/>
    <parameter name="[aspIdentifierTag]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.tag"/>
    <test parameter="[aspIdentifierTag]" condition="number.equals" value="17"/>    
    <parameter name="[aspIdentifierLength]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.length"/>    
    <test parameter="[aspIdentifierLength]" condition="number.equals" value="8"/>
    <parameter name="[aspIdentifierFormat]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.format"/>    
    <test parameter="[aspIdentifierFormat]" condition="string.equals" value="grouped"/>
    
    <parameter name="[aspIdentifier1Name]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.field.ASP_Identifier.name"/>    
    <test parameter="[aspIdentifier1Name]" condition="string.equals" value="ASP_Identifier"/>
    <parameter name="[aspIdentifier1Length]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.field.ASP_Identifier.length"/>    
    <test parameter="[aspIdentifier1Length]" condition="number.equals" value="4"/>
    <parameter name="[aspIdentifier1Format]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.field.ASP_Identifier.format"/>    
    <test parameter="[aspIdentifier1Format]" condition="string.equals" value="integer"/>
    <parameter name="[aspIdentifier1Value]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.field.ASP_Identifier.value"/>    
    <test parameter="[aspIdentifier1Value]" condition="number.equals" value="19"/>
    <parameter name="[aspIdentifier1LengthBit]" operation="protocol.setFromMessage" value="ua.parameter.ASP_Identifier.field.ASP_Identifier.lengthbit"/>    
    <test parameter="[aspIdentifier1LengthBit]" condition="number.equals" value="0"/>

    <parameter name="[infoStringName]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.name"/>    
    <test parameter="[infoStringName]" condition="string.equals" value="INFO_String"/>
    <parameter name="[infoStringTag]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.tag"/>
    <test parameter="[infoStringTag]" condition="number.equals" value="4"/>    
    <parameter name="[infoStringLength]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.length"/>    
    <test parameter="[infoStringLength]" condition="number.equals" value="9"/>
    <parameter name="[infoStringFormat]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.format"/>    
    <test parameter="[infoStringFormat]" condition="string.equals" value="grouped"/>
    
    <parameter name="[infoStringName]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.field.INFO_String.name"/>    
    <test parameter="[infoStringName]" condition="string.equals" value="INFO_String"/>
    <parameter name="[infoStringLength]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.field.INFO_String.length"/>    
    <test parameter="[infoStringLength]" condition="number.equals" value="5"/>
    <parameter name="[infoStringFormat]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.field.INFO_String.format"/>    
    <test parameter="[infoStringFormat]" condition="string.equals" value="STRING"/>
    <parameter name="[infoStringValue]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.field.INFO_String.value"/>    
    <test parameter="[infoStringValue]" condition="string.equals" value="ASPUP"/>
    <parameter name="[infoStringLengthBit]" operation="protocol.setFromMessage" value="ua.parameter.INFO_String.field.INFO_String.lengthbit"/>    
    <test parameter="[infoStringLengthBit]" condition="number.equals" value="0"/>
        
</scenario>
	
