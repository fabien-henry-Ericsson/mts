

################################################################################
#                                                                              #
#                         S1AP Protocol                                    #
#                                                                              #
################################################################################


###############################################################################
#                                                                             #
# DEFAULT LISTENPOINT : to receive messages.                                  #
# If no channel nor listenpoint are specified in <sendMessagePPP> operations, #
# then this default one is used to fixe the source information (host and port)#
# on the transport layer like UDP based protocol                              #
#                                                                             #
###############################################################################

# Default listen host (IP addresses or DNS name); empty value means to listen
# on all local IP adresses (similar to 0.0.0.0) and that the source IP address
# is the first local IP address
# NOTE: for the S1AP protocol this parameter is used to initialise the
# Origin-Host AVP on the CER/CEA, DWR/DWA and STR/STA messages if it is not
# specified in the <createListenpointPPP> operation or if the default
# configuration listenpoint is used.
# [string]
listenpoint.LOCAL_HOST =

# Default listen port; empty or zero value means no listen port
# [integer]
listenpoint.LOCAL_PORT = 3875

# Flag to listen to UDP transport
# [boolean]
listenpoint.LISTEN_UDP = false

# Flag to listen to TCP transport
# [boolean]
listenpoint.LISTEN_TCP = false

# Flag to listen to SCTP transport
# [boolean]
listenpoint.LISTEN_SCTP = true

# Flag to listen to TLS transport
# [boolean]
listenpoint.LISTEN_TLS = false

# Default listen port for TLS transport; empty or zero means listen.LOCAL_PORT + 1
# [integer]
listenpoint.LOCAL_PORT_TLS =

# Default transport for sending messages; possible values are : udp, tcp, sctp, tls
# (where rfc means that transport is chosen using the RFC 3261)
# [enumeration] sctp
listenpoint.TRANSPORT = sctp


# Default S1AP server address to send the request to
# [string]
DEFAULT_SERVER_URL=s1ap://127.0.0.1:3875

# transport for S1AP protocol (client mode)
# BE CAREFUL : SCTP is supported only on LINUX platform
# [enumeration] TCP|SCTP
DEFAULT_TRANSPORT=SCTP

#######################################################

# Time (in seconds) of life the messages and transactions
# [float]
MESSAGE_TIME_LIFE = 30

# Time (in seconds) of life the session objects
# [float]
SESSION_TIME_LIFE = 10

# Timeout duration (in seconds) for the receive operations
# [float]
operations.RECEIVE_TIMEOUT = 30


#######################################################
# route
#######################################################

# The tool automatically routes a received response to the scenario which has sent the corresponding request.
# The transactionID is used internally to make the corresponding between requests and responses.
# This parameter is used to get the transactionID from the message given a list of paths (separated
# by ',' character). The paths are defined with the setFromMessage operation and are of course
# protocol dependant
# type list<string> (list of path keywords)
# [string]
# route.TRANSACTION_ID =


# The sessionID is used internally to maintain sessions ie the correspondance between many
# messages that are linked each together.
# The tool uses session for internal routing : it automatically routes a received message
# to the scenario which has initiated the session.
# This parameter is used to get the sessionID from the message given a list of paths (separated
# by ',' character). The paths are defined with the setFromMessage operation and are of course
# protocol dependant
# type list<string> (list of path keywords)
# [string]
# route.SESSION_ID =

# The tool routes a received request to the scenario given by its name. In this case, the tool is
# simulating a pure server.
# This parameter is used to get the scenario name as mentioned in the test file from the message
# given a list of paths (separated by ',' character). The path are defined with the setFromMessage
# operation and are of course protocol dependant
# type list<string> (list of path keywords)
# [string]
route.SCENARIO_NAME = listenpoint.localPort| listenpoint.name | channel.localPort | message.protocol

# This ID is used to identify retransmissions. A message having the same retranmissionId as a previous one
# will be handled has a retransmission. If it is a request it will eventually lead to the retransmission of
# subsequent responses and the filtering of the message. If it is a response it might lead to the filtering
# of the message.
# type list<string> (list of path keywords)
# [string]
# route.RETRANSMISSION_ID =

# By default, the tool routes a received responses to the scenario which has sent the corresponding
# request; if this parameter equals to false, then this mechanism is deactivated and the responses
# are routed using the route.SCENARIO_NAME path : ie the tools calculates the scenario name and
# dispatch the response to the scenario with the same name
# [boolean]
route.DEFAULT_RESPONSE = true

# By default, the tool routes a received subsequent messages to the scenario which has sent
# the initial message of the corresponding session; if this parameter equals to false, then this
# mechanism is deasctivated and the subsequent messages are routed using the route.SCENARIO_NAME
# path : ie the tools calculates the scenario name and dispatch the response to the scenario
# with the same name
# [boolean]
route.DEFAULT_SUBSEQUENT = true


#######################################################
# Dictionary

# This parameter defines the path for diameter dictionary.
# This path is now relative to the directory where your test
# file is located (since 6.1.0 version of MTS). But you can
# also provide an absolute path.
# (file path)
# [string]
dictionary.PATH =


#######################################################

# trace level for the S1AP stack : possible values are
# ( OFF, ALL, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST)
# [enumeration] OFF|ALL|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST
TRACE_LEVEL= WARNING

# test use only
NB_ITERATION=10000
