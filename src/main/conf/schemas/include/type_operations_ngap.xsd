<!--                                                                       START OF NGAP PROTOCOL -->

<!--                                                                          openChannel -->
<xs:complexType name="openChannelNGAPType">
    <xs:complexContent>
        <xs:extension base="openTransportableChannelType">
            <xs:attribute name="localHost" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>String</xs:appinfo>
                    <xs:documentation>The channel local host (sometimes called the source host) of the channel. It should of course be one of the local addresses of the host or a host name with a DNS resolution. If the transport layer supports multihoming, it can also be a list of local hosts delimited by commas (',') to select the multihoming addresses.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="localPort" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>Integer</xs:appinfo>
                    <xs:documentation>The channel local port (sometimes called the source port) of the channel. The default value is chosen by the tool.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="localURL" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>String (url)</xs:appinfo>
                    <xs:documentation>The local URL of the channel (sometimes called the source information).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="remoteHost" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>String</xs:appinfo>
                    <xs:documentation>The channel remote host (sometimes called the destination host) of the channel. It could be an IP address or a host name with a DNS resolution.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="remotePort" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>Integer</xs:appinfo>
                    <xs:documentation>The channel remote port (sometimes called the destination port) of the channel.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="remoteURL" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>String (url)</xs:appinfo>
                    <xs:documentation>The remote URL of the channel (sometimes called the destination information).</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="transport" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
                    <xs:documentation>The channel transport.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:extension>
    </xs:complexContent>
</xs:complexType>

        <!--                                                                         closeChannel -->
<xs:complexType name="closeChannelNGAPType">
<xs:complexContent>
    <xs:extension base="operationType"/>
</xs:complexContent>
</xs:complexType>


        <!--                                                                          createListenpoint -->
<xs:complexType name="createListenpointNGAPType">
<xs:complexContent>
    <xs:extension base="createTransportableListenpointType">
        <xs:sequence>
            <xs:element name="nodeSettings"     type="nodeSettingsType"       minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="localHost" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The listenpoint local host i.e. the IP address we are listening to. It should of course be one of the local addresses of the host or a host name with a DNS resolution. If the transport layer supports multihoming, it can also be a list of local hosts delimited by commas (',') to select the multihoming addresses. The default value is configurable(ppp.properties/listenpoint.LOCAL_HOST)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="localPort" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Integer</xs:appinfo>
                <xs:documentation>The listenpoint local port i.e. the port we are listening to. The default value is configurable(ppp.properties/listenpoint.LOCAL_PORT)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="localURL" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String (url)</xs:appinfo>
                <xs:documentation>The listenpoint local URL we are listening to.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenUDP" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>A flag to specify whether we are listening to the UDP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_UDP)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenTCP" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>A flag to specify whether we are listening to the TCP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TCP)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenSCTP" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>A flag to specify whether we are listening to the SCTP transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_SCTP)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenTLS" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>A flag to specify whether we are listening to the TLS transport. The default value is configurable(ppp.properties/listenpoint.LISTEN_TLS)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="localPortTLS" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Integer</xs:appinfo>
                <xs:documentation>The listenpoint local port for TLS transport i.e. the port we are listening to. The default value is LOCAL_PORT + 1</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="transport" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>enumeration (UDP, TCP, SCTP, TLS, RFC)</xs:appinfo>
                <xs:documentation>The default transport used to transport messages (in case the transport is not specified int the message content). The default value is configurable(ppp.properties/listenpoint.TRANSPORT)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:extension>
</xs:complexContent>
</xs:complexType>
        <!--                                                                         removeListenpoint -->
<xs:complexType name="removeListenpointNGAPType">
<xs:complexContent>
    <xs:extension base="operationType"/>
</xs:complexContent>
</xs:complexType>

        <!--                                                                            sendMessage -->
<xs:complexType name="sendMessageNGAPType">
<xs:complexContent>
    <xs:extension base="sendTransportableMessageType">
        <xs:sequence>
            <xs:element name="NGAP-PDU"  type="NGAPPDUType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="channel" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenpoint" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The name of the listenpoint to transport the message. Don't use it with channel (incompatible)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="remoteHost" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The remote host to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="remotePort" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Integer</xs:appinfo>
                <xs:documentation>The remote port to send the message to. Don't use it with the channel (incompatible)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="remoteURL" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String (url)</xs:appinfo>
                <xs:documentation>The remote URL to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="transport" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>enumeration (UDP, TCP, SCTP, TLS)</xs:appinfo>
                <xs:documentation>The protocol transport to send the message to. Don't use it with the channel (incompatible).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="destScenario" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String (scenario name)</xs:appinfo>
                <xs:documentation>The destination scenario if the request comes to IMSloader again (case of proxy testing). This attribute should contain the name of the scenario to route the same message to.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="delay" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Float</xs:appinfo>
                <xs:documentation>The time delay (in seconds) when the message sending is differed.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="request" type="xs:string" >
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>DEPRECATED : The flag to indicate whether the message is a request ("True") or a response ("false").</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:extension>
</xs:complexContent>
</xs:complexType>

        <!--                                                                            receiveMessage -->
<xs:complexType name="receiveMessageNGAPType">
<xs:complexContent>
    <xs:extension base="receiveTransportableMessageType">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="parameter"  type="parameterType" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="test"       type="testType"      minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="and"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="or"         type="conditionType" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="not"        type="conditionType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="channel" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The name of the channel to transport the message. Don't use it with listenpoint (incompatible)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="listenpoint" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The listenpoint name to transport the message. Don't use it with channel (incompatible)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="probe" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The probe name to capture the message on.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="request" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>True means that we are waiting for a request whereas false means a response. If not specified, then no filtering is required</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The message type we are waiting for. If not specified, then no filtering is required</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="result" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>String</xs:appinfo>
                <xs:documentation>The message result (for response only) we are waiting for. If not specified, then no filtering is required</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="timeout" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Float</xs:appinfo>
                <xs:documentation>The timeout i.e. the maximum time (in seconds) we are waiting for. The default value is configurable (ppp.properties/operations.RECEIVE_TIMEOUT) If not specified, then no filtering is required</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="failedOnReceive" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>True means that we are not waiting a message i.e. if we will receive a message , then the operation status is set to FAILED. The default value is false.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="failedOnTimeout" type="xs:string" use="optional">
            <xs:annotation>
                <xs:appinfo>Boolean</xs:appinfo>
                <xs:documentation>True means that we are waiting a message i.e. if we won't receive any message , then the operation status is set to FAILED. The default value is true.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:extension>
</xs:complexContent>
</xs:complexType>


        <!--                                                                                   NGAPPDUType -->
<xs:complexType name="NGAPPDUType">
<xs:sequence>
    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
</xs:sequence>
<xs:anyAttribute/>
</xs:complexType>

        <!--                                                                         END OF NGAP PROTOCOL -->
